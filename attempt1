#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>


#define DATALEN 1024
#define NODENUM 5000
#define PATHNUM 5000

long nodetable[NODENUM];   //store all node, old node's number  change to new node's number node对照
double nodeX[NODENUM],nodeY[NODENUM];  //node X,Y coordinates
double distancenode[NODENUM][NODENUM]; //node diatance from A to B
int path[NODENUM][NODENUM]; //id, path from A to B seconds
int pathtable[PATHNUM],pathfrom[PATHNUM],pathto[PATHNUM]; //link id列表 new id sub //某link起点  值节点号新//某link终点


double round6(double d)
{
    int flag;
    double d1=0.0;


    if (d<0.0)
      flag=0;
    else
      flag=1;
    d1=fabs(d);
    d1=round((d1+0.000000001)*1000000)/1000000;//小数向整数四舍五入
    if (flag==0)
    {
        return d1*(-1);
    }
    else
    {
       return d1;
    }
}

//find sub string
//input: string,sub string
//output: index
int findstring(char* str1,char* str2)
{
    int i,j,flag=-1;
    for(i=0,j=0;str1[i]!=NULL;i++)
    {
        while(str1[i]==str2[j]&&str1[i]&&str2[j])
        {
            i++;
            j++;
            if(str2[j]==NULL)
            {
                flag=i-j;//return the location of str 2
                return flag;
            }
        }
        j=0;
    }
    return flag;
}

//find sub string；secord
//input: string,sub string
//output: index
int findstring2(char* str1,char* str2)
{
    int i,j,flag=-1;

    i=findstring(str1,str2);   //first
    j=findstring(str1+i+strlen(str2),str2);   //secord

    return i+strlen(str2)+j;
}

//get sub string between of string1 and string2
//input:
//output:
long trunc2int(char total[], char left[], char right[])
{
    int i=0,j=0,k=0;
    char t[256];

    for ( i=findstring(total,left)+strlen(left),j=findstring(total,right); i<j; i++)
    {
        t[k] = total[i];
        k++;
    }
    t[k] = '\0';
    return atol(t);
}

//get sub string between of string1 and string2
//input:
//output:
long trunc2int2(char total[], char left[], char right[])
{
    int i=0,j=0,k=0;
    char t[256];

    for ( i=findstring(total,left)+strlen(left),j=findstring2(total,right); i<j; i++)
    {
        t[k] = total[i];
        k++;
    }
    t[k] = '\0';
    return atol(t);
}

//get sub string between of string1 and string2
//input:
//output:
long trunc2int3(char total[], char left[], char right[])
{
    int i=0,j=0,k=0;
    char t[256];

    for ( i=findstring2(total,left)+strlen(left),j=findstring(total,right); i<j; i++)
    {
        t[k] = total[i];
        k++;
    }
    t[k] = '\0';
    return atol(t);
}

//get sub string between of string1 and string2
//input:
//output:
double trunc2float(char total[], char left[], char right[])
{
    int i=0,j=0,k=0;
    char t[256];

//    for (i=0;i<256;i++) t[i]='\0';

    for ( i=findstring(total,left)+strlen(left),j=findstring(total,right); i<j; i++)
    {
        t[k] = total[i];
        k++;
    }
    t[k] = '\0';
    return round6(atof(t));
}

int getnewnodeid(long oldnodeid)
{
    int i,index=0;
    for(i=0;i<NODENUM;i++)
    {
        if (nodetable[i]==oldnodeid)
        {
           index=i; break;
        }
    }
    return index;
}
